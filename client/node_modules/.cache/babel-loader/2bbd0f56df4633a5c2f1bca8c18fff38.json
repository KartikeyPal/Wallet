{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Desktop\\\\walletD\\\\client\\\\src\\\\components\\\\Intro\\\\Accounts.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Accounts({\n  web3,\n  accountAddress\n}) {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [accountBalance, setaccountBalance] = useState(null);\n  const [provider, setProvider] = useState(null);\n  useEffect(() => {\n    const allAccounts = async () => {\n      setProvider(web3.eth.currentProvider.host);\n      console.log(web3.eth.currentProvider.host);\n      var select = document.getElementById(\"selectNumber\");\n      var options = await web3.eth.getAccounts();\n      for (var i = 0; i < options.length; i++) {\n        var opt = options[i];\n        var el = document.createElement(\"option\");\n        el.textContent = opt;\n        el.value = opt;\n        select.appendChild(el);\n      }\n    };\n    web3 && allAccounts();\n  }, [web3]);\n  const selectAccount = async () => {\n    let selectedAccountAddress = document.getElementById(\"selectNumber\").value;\n    accountAddress(selectedAccountAddress);\n    let accountBalance = await web3.eth.getBalance(selectedAccountAddress);\n    setaccountBalance(accountBalance);\n    setAccount(selectedAccountAddress);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"myForm\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"selectNumber\",\n        onChange: selectAccount,\n        children: /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Choose an account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), \"Connected Account: \", account, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), \"Account Balance:\", accountBalance, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), \"Provider:\", provider]\n  }, void 0, true);\n}\n_s(Accounts, \"LTNoYzu2dSPZNUAdB2tvD3nKgOo=\");\n_c = Accounts;\nexport default Accounts;\n//To have\n//there should be no need of from field. The selected account should send transaction\n//check balance before transfering\nvar _c;\n$RefreshReg$(_c, \"Accounts\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Accounts","web3","accountAddress","_s","account","setAccount","accountBalance","setaccountBalance","provider","setProvider","allAccounts","eth","currentProvider","host","console","log","select","document","getElementById","options","getAccounts","i","length","opt","el","createElement","textContent","value","appendChild","selectAccount","selectedAccountAddress","getBalance","children","id","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/karti/OneDrive/Desktop/walletD/client/src/components/Intro/Accounts.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction Accounts({ web3, accountAddress }) {\r\n  const [account, setAccount] = useState(null);\r\n  const [accountBalance, setaccountBalance] = useState(null);\r\n  const [provider, setProvider] = useState(null);\r\n  useEffect(() => {\r\n    const allAccounts = async () => {\r\n      setProvider(web3.eth.currentProvider.host);\r\n      console.log(web3.eth.currentProvider.host);\r\n      var select = document.getElementById(\"selectNumber\");\r\n      var options = await web3.eth.getAccounts();\r\n\r\n      for (var i = 0; i < options.length; i++) {\r\n        var opt = options[i];\r\n        var el = document.createElement(\"option\");\r\n        el.textContent = opt;\r\n        el.value = opt;\r\n        select.appendChild(el);\r\n      }\r\n    };\r\n    web3 && allAccounts();\r\n  }, [web3]);\r\n  const selectAccount = async () => {\r\n    let selectedAccountAddress = document.getElementById(\"selectNumber\").value;\r\n    accountAddress(selectedAccountAddress);\r\n    let accountBalance = await web3.eth.getBalance(selectedAccountAddress);\r\n    setaccountBalance(accountBalance);\r\n    setAccount(selectedAccountAddress);\r\n  };\r\n  return (\r\n    <>\r\n      <form id=\"myForm\">\r\n        <select id=\"selectNumber\" onChange={selectAccount}>\r\n          <option>Choose an account</option>\r\n        </select>\r\n      </form>\r\n      Connected Account: {account}\r\n      <br></br>\r\n      Account Balance:{accountBalance}\r\n      <br></br>\r\n      Provider:{provider}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Accounts;\r\n//To have\r\n//there should be no need of from field. The selected account should send transaction\r\n//check balance before transfering\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}